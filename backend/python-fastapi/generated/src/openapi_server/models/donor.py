# coding: utf-8

"""
    AVIS Donazioni API

    API per l'app mobile AVIS (Italia) per la gestione delle donazioni di sangue. Lingua primaria: italiano (supporto inglese opzionalmente). Implementazione MVP ispirata al NHS Give Blood (booking, centri, storico donazioni, notifiche). 

    The version of the OpenAPI document: 1.0.0
    Contact: dev@avis.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from datetime import date
from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from uuid import UUID
from openapi_server.models.donation_record import DonationRecord
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Donor(BaseModel):
    """
    Donor
    """ # noqa: E501
    id: Optional[UUID] = None
    first_name: Optional[StrictStr] = None
    last_name: Optional[StrictStr] = None
    email: Optional[StrictStr] = None
    phone: Optional[StrictStr] = None
    codice_fiscale: Optional[StrictStr] = None
    dob: Optional[date] = None
    blood_group: Optional[StrictStr] = None
    donation_history: Optional[List[DonationRecord]] = None
    gdpr_consent: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["id", "first_name", "last_name", "email", "phone", "codice_fiscale", "dob", "blood_group", "donation_history", "gdpr_consent"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Donor from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in donation_history (list)
        _items = []
        if self.donation_history:
            for _item in self.donation_history:
                if _item:
                    _items.append(_item.to_dict())
            _dict['donation_history'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Donor from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "first_name": obj.get("first_name"),
            "last_name": obj.get("last_name"),
            "email": obj.get("email"),
            "phone": obj.get("phone"),
            "codice_fiscale": obj.get("codice_fiscale"),
            "dob": obj.get("dob"),
            "blood_group": obj.get("blood_group"),
            "donation_history": [DonationRecord.from_dict(_item) for _item in obj.get("donation_history")] if obj.get("donation_history") is not None else None,
            "gdpr_consent": obj.get("gdpr_consent")
        })
        return _obj



# coding: utf-8

"""
    AVIS Donazioni API

    API per l'app mobile AVIS (Italia) per la gestione delle donazioni di sangue. Lingua primaria: italiano (supporto inglese opzionalmente). Implementazione MVP ispirata al NHS Give Blood (booking, centri, storico donazioni, notifiche). 

    The version of the OpenAPI document: 1.0.0
    Contact: dev@avis.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_server.models.slot import Slot
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Appointment(BaseModel):
    """
    Appointment
    """ # noqa: E501
    appointment_id: Optional[StrictStr] = None
    donor_id: Optional[StrictStr] = None
    center_id: Optional[StrictStr] = None
    slot: Optional[Slot] = None
    status: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["appointment_id", "donor_id", "center_id", "slot", "status"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('booked', 'cancelled', 'completed',):
            raise ValueError("must be one of enum values ('booked', 'cancelled', 'completed')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Appointment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of slot
        if self.slot:
            _dict['slot'] = self.slot.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Appointment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appointment_id": obj.get("appointment_id"),
            "donor_id": obj.get("donor_id"),
            "center_id": obj.get("center_id"),
            "slot": Slot.from_dict(obj.get("slot")) if obj.get("slot") is not None else None,
            "status": obj.get("status")
        })
        return _obj



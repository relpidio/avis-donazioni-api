/* tslint:disable */
/* eslint-disable */
/**
 * AVIS Donazioni API
 * API per l\'app mobile AVIS (Italia) per la gestione delle donazioni di sangue. Lingua primaria: italiano (supporto inglese opzionalmente). Implementazione MVP ispirata al NHS Give Blood (booking, centri, storico donazioni, notifiche). 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dev@avis.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Donor,
  DonorUpdate,
} from '../models/index';
import {
    DonorFromJSON,
    DonorToJSON,
    DonorUpdateFromJSON,
    DonorUpdateToJSON,
} from '../models/index';

export interface DonorsDonorIdGetRequest {
    donorId: string;
}

export interface DonorsDonorIdPutRequest {
    donorId: string;
    donorUpdate: DonorUpdate;
}

/**
 * 
 */
export class DonorsApi extends runtime.BaseAPI {

    /**
     * Recupera profilo donatore
     */
    async donorsDonorIdGetRaw(requestParameters: DonorsDonorIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Donor>> {
        if (requestParameters['donorId'] == null) {
            throw new runtime.RequiredError(
                'donorId',
                'Required parameter "donorId" was null or undefined when calling donorsDonorIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/donors/{donorId}`;
        urlPath = urlPath.replace(`{${"donorId"}}`, encodeURIComponent(String(requestParameters['donorId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DonorFromJSON(jsonValue));
    }

    /**
     * Recupera profilo donatore
     */
    async donorsDonorIdGet(requestParameters: DonorsDonorIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Donor> {
        const response = await this.donorsDonorIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Aggiorna dati donatore
     */
    async donorsDonorIdPutRaw(requestParameters: DonorsDonorIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['donorId'] == null) {
            throw new runtime.RequiredError(
                'donorId',
                'Required parameter "donorId" was null or undefined when calling donorsDonorIdPut().'
            );
        }

        if (requestParameters['donorUpdate'] == null) {
            throw new runtime.RequiredError(
                'donorUpdate',
                'Required parameter "donorUpdate" was null or undefined when calling donorsDonorIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/donors/{donorId}`;
        urlPath = urlPath.replace(`{${"donorId"}}`, encodeURIComponent(String(requestParameters['donorId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DonorUpdateToJSON(requestParameters['donorUpdate']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Aggiorna dati donatore
     */
    async donorsDonorIdPut(requestParameters: DonorsDonorIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.donorsDonorIdPutRaw(requestParameters, initOverrides);
    }

}

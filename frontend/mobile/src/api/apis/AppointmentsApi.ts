/* tslint:disable */
/* eslint-disable */
/**
 * AVIS Donazioni API
 * API per l\'app mobile AVIS (Italia) per la gestione delle donazioni di sangue. Lingua primaria: italiano (supporto inglese opzionalmente). Implementazione MVP ispirata al NHS Give Blood (booking, centri, storico donazioni, notifiche). 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dev@avis.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Appointment,
  AppointmentCreate,
  AppointmentUpdate,
} from '../models/index';
import {
    AppointmentFromJSON,
    AppointmentToJSON,
    AppointmentCreateFromJSON,
    AppointmentCreateToJSON,
    AppointmentUpdateFromJSON,
    AppointmentUpdateToJSON,
} from '../models/index';

export interface AppointmentsAppointmentIdDeleteRequest {
    appointmentId: string;
}

export interface AppointmentsAppointmentIdPutRequest {
    appointmentId: string;
    appointmentUpdate: AppointmentUpdate;
}

export interface AppointmentsPostRequest {
    appointmentCreate: AppointmentCreate;
}

/**
 * 
 */
export class AppointmentsApi extends runtime.BaseAPI {

    /**
     * Annulla prenotazione
     */
    async appointmentsAppointmentIdDeleteRaw(requestParameters: AppointmentsAppointmentIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['appointmentId'] == null) {
            throw new runtime.RequiredError(
                'appointmentId',
                'Required parameter "appointmentId" was null or undefined when calling appointmentsAppointmentIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/appointments/{appointmentId}`;
        urlPath = urlPath.replace(`{${"appointmentId"}}`, encodeURIComponent(String(requestParameters['appointmentId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Annulla prenotazione
     */
    async appointmentsAppointmentIdDelete(requestParameters: AppointmentsAppointmentIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appointmentsAppointmentIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Reagenda prenotazione
     */
    async appointmentsAppointmentIdPutRaw(requestParameters: AppointmentsAppointmentIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['appointmentId'] == null) {
            throw new runtime.RequiredError(
                'appointmentId',
                'Required parameter "appointmentId" was null or undefined when calling appointmentsAppointmentIdPut().'
            );
        }

        if (requestParameters['appointmentUpdate'] == null) {
            throw new runtime.RequiredError(
                'appointmentUpdate',
                'Required parameter "appointmentUpdate" was null or undefined when calling appointmentsAppointmentIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/appointments/{appointmentId}`;
        urlPath = urlPath.replace(`{${"appointmentId"}}`, encodeURIComponent(String(requestParameters['appointmentId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AppointmentUpdateToJSON(requestParameters['appointmentUpdate']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Reagenda prenotazione
     */
    async appointmentsAppointmentIdPut(requestParameters: AppointmentsAppointmentIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appointmentsAppointmentIdPutRaw(requestParameters, initOverrides);
    }

    /**
     * Lista appuntamenti del donatore
     */
    async appointmentsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Appointment>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/appointments`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AppointmentFromJSON));
    }

    /**
     * Lista appuntamenti del donatore
     */
    async appointmentsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Appointment>> {
        const response = await this.appointmentsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Crea prenotazione
     */
    async appointmentsPostRaw(requestParameters: AppointmentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Appointment>> {
        if (requestParameters['appointmentCreate'] == null) {
            throw new runtime.RequiredError(
                'appointmentCreate',
                'Required parameter "appointmentCreate" was null or undefined when calling appointmentsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/appointments`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppointmentCreateToJSON(requestParameters['appointmentCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppointmentFromJSON(jsonValue));
    }

    /**
     * Crea prenotazione
     */
    async appointmentsPost(requestParameters: AppointmentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Appointment> {
        const response = await this.appointmentsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

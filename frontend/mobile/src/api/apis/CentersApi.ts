/* tslint:disable */
/* eslint-disable */
/**
 * AVIS Donazioni API
 * API per l\'app mobile AVIS (Italia) per la gestione delle donazioni di sangue. Lingua primaria: italiano (supporto inglese opzionalmente). Implementazione MVP ispirata al NHS Give Blood (booking, centri, storico donazioni, notifiche). 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dev@avis.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Center,
  Slot,
} from '../models/index';
import {
    CenterFromJSON,
    CenterToJSON,
    SlotFromJSON,
    SlotToJSON,
} from '../models/index';

export interface CentersCenterIdAvailabilityGetRequest {
    centerId: string;
    dateFrom?: Date;
    dateTo?: Date;
}

export interface CentersGetRequest {
    lat?: number;
    lng?: number;
    radiusKm?: number;
    region?: string;
}

/**
 * 
 */
export class CentersApi extends runtime.BaseAPI {

    /**
     * Disponibilità (slots) per centro
     */
    async centersCenterIdAvailabilityGetRaw(requestParameters: CentersCenterIdAvailabilityGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Slot>>> {
        if (requestParameters['centerId'] == null) {
            throw new runtime.RequiredError(
                'centerId',
                'Required parameter "centerId" was null or undefined when calling centersCenterIdAvailabilityGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['dateFrom'] != null) {
            queryParameters['date_from'] = (requestParameters['dateFrom'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['dateTo'] != null) {
            queryParameters['date_to'] = (requestParameters['dateTo'] as any).toISOString().substring(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/centers/{centerId}/availability`;
        urlPath = urlPath.replace(`{${"centerId"}}`, encodeURIComponent(String(requestParameters['centerId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SlotFromJSON));
    }

    /**
     * Disponibilità (slots) per centro
     */
    async centersCenterIdAvailabilityGet(requestParameters: CentersCenterIdAvailabilityGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Slot>> {
        const response = await this.centersCenterIdAvailabilityGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lista centri (filtro per regione/coordinate/tipo)
     */
    async centersGetRaw(requestParameters: CentersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Center>>> {
        const queryParameters: any = {};

        if (requestParameters['lat'] != null) {
            queryParameters['lat'] = requestParameters['lat'];
        }

        if (requestParameters['lng'] != null) {
            queryParameters['lng'] = requestParameters['lng'];
        }

        if (requestParameters['radiusKm'] != null) {
            queryParameters['radius_km'] = requestParameters['radiusKm'];
        }

        if (requestParameters['region'] != null) {
            queryParameters['region'] = requestParameters['region'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/centers`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CenterFromJSON));
    }

    /**
     * Lista centri (filtro per regione/coordinate/tipo)
     */
    async centersGet(requestParameters: CentersGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Center>> {
        const response = await this.centersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

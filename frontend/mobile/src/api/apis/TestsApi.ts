/* tslint:disable */
/* eslint-disable */
/**
 * AVIS Donazioni API
 * API per l\'app mobile AVIS (Italia) per la gestione delle donazioni di sangue. Lingua primaria: italiano (supporto inglese opzionalmente). Implementazione MVP ispirata al NHS Give Blood (booking, centri, storico donazioni, notifiche). 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dev@avis.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  TestResult,
} from '../models/index';
import {
    TestResultFromJSON,
    TestResultToJSON,
} from '../models/index';

export interface DonorsDonorIdTestsGetRequest {
    donorId: string;
}

/**
 * 
 */
export class TestsApi extends runtime.BaseAPI {

    /**
     * Elenco risultati esami del donatore (PDF/valori)
     */
    async donorsDonorIdTestsGetRaw(requestParameters: DonorsDonorIdTestsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TestResult>>> {
        if (requestParameters['donorId'] == null) {
            throw new runtime.RequiredError(
                'donorId',
                'Required parameter "donorId" was null or undefined when calling donorsDonorIdTestsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/donors/{donorId}/tests`;
        urlPath = urlPath.replace(`{${"donorId"}}`, encodeURIComponent(String(requestParameters['donorId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TestResultFromJSON));
    }

    /**
     * Elenco risultati esami del donatore (PDF/valori)
     */
    async donorsDonorIdTestsGet(requestParameters: DonorsDonorIdTestsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TestResult>> {
        const response = await this.donorsDonorIdTestsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

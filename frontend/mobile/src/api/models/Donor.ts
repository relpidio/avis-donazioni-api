/* tslint:disable */
/* eslint-disable */
/**
 * AVIS Donazioni API
 * API per l\'app mobile AVIS (Italia) per la gestione delle donazioni di sangue. Lingua primaria: italiano (supporto inglese opzionalmente). Implementazione MVP ispirata al NHS Give Blood (booking, centri, storico donazioni, notifiche). 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dev@avis.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DonationRecord } from './DonationRecord';
import {
    DonationRecordFromJSON,
    DonationRecordFromJSONTyped,
    DonationRecordToJSON,
    DonationRecordToJSONTyped,
} from './DonationRecord';

/**
 * 
 * @export
 * @interface Donor
 */
export interface Donor {
    /**
     * 
     * @type {string}
     * @memberof Donor
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Donor
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof Donor
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof Donor
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof Donor
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof Donor
     */
    codiceFiscale?: string;
    /**
     * 
     * @type {Date}
     * @memberof Donor
     */
    dob?: Date;
    /**
     * 
     * @type {string}
     * @memberof Donor
     */
    bloodGroup?: string;
    /**
     * 
     * @type {Array<DonationRecord>}
     * @memberof Donor
     */
    donationHistory?: Array<DonationRecord>;
    /**
     * 
     * @type {boolean}
     * @memberof Donor
     */
    gdprConsent?: boolean;
}

/**
 * Check if a given object implements the Donor interface.
 */
export function instanceOfDonor(value: object): value is Donor {
    return true;
}

export function DonorFromJSON(json: any): Donor {
    return DonorFromJSONTyped(json, false);
}

export function DonorFromJSONTyped(json: any, ignoreDiscriminator: boolean): Donor {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'firstName': json['first_name'] == null ? undefined : json['first_name'],
        'lastName': json['last_name'] == null ? undefined : json['last_name'],
        'email': json['email'] == null ? undefined : json['email'],
        'phone': json['phone'] == null ? undefined : json['phone'],
        'codiceFiscale': json['codice_fiscale'] == null ? undefined : json['codice_fiscale'],
        'dob': json['dob'] == null ? undefined : (new Date(json['dob'])),
        'bloodGroup': json['blood_group'] == null ? undefined : json['blood_group'],
        'donationHistory': json['donation_history'] == null ? undefined : ((json['donation_history'] as Array<any>).map(DonationRecordFromJSON)),
        'gdprConsent': json['gdpr_consent'] == null ? undefined : json['gdpr_consent'],
    };
}

export function DonorToJSON(json: any): Donor {
    return DonorToJSONTyped(json, false);
}

export function DonorToJSONTyped(value?: Donor | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'first_name': value['firstName'],
        'last_name': value['lastName'],
        'email': value['email'],
        'phone': value['phone'],
        'codice_fiscale': value['codiceFiscale'],
        'dob': value['dob'] == null ? value['dob'] : value['dob'].toISOString().substring(0,10),
        'blood_group': value['bloodGroup'],
        'donation_history': value['donationHistory'] == null ? undefined : ((value['donationHistory'] as Array<any>).map(DonationRecordToJSON)),
        'gdpr_consent': value['gdprConsent'],
    };
}

